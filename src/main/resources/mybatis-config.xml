<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
	<!-- plugins在配置文件中的位置必须符合要求，否则会报错，顺序如下: properties, settings, typeAliases, plugins,
			objectFactory, objectWrapperFactory, reflectorFactory, environments, databaseIdProvider, typeHandlers, mappers -->
	<!-- 配置mybatis的缓存，延迟加载等等一系列属性 -->
	<settings>
		<!-- 全局的开启或关闭配置文件中的所有映射器已经配置的任何缓存，关闭二级缓存，默认开启 -->
		<setting name="cacheEnabled" value="false" />
		<!-- 开启一级缓存，缓存级别为SESSION（默认），如果缓存级别为STATEMENT将不会再同一个SqlSession中缓存 -->
		<setting name="localCacheScope" value="STATEMENT" />
		<!-- 通过resultMap标签内的association标签可使用延迟加载 -->
		<!-- 查询时，关闭关联对象即时加载以提高性能，开启延迟加载，默认关闭，关闭表示直接加载，查询时就进行关联查询 -->
		<setting name="lazyLoadingEnabled" value="true" />
		<!-- 设置关联对象加载的形态，关闭侵入式延迟加载，在访问主对象时不进行查询关联对象，而是在真正访问关联对象时才进行关联查询，以提高性能 -->
		<!-- 3.4.1及之前的版本默认为开启，表示查询时不进行关联查询，访问主对象时才进行关联查询 -->
		<setting name="aggressiveLazyLoading" value="false" />
		<!-- 指定主对象调用哪个方法时可以触发一次延迟加载，默认配置 -->
		<setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString" />
		<!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 -->
		<setting name="multipleResultSetsEnabled" value="true" />
		<!-- 允许使用列标签代替列名 -->
		<setting name="useColumnLabel" value="true" />
		<!-- 不允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 -->
		<setting name="useGeneratedKeys" value="false" />
		<!-- 给予被嵌套的resultMap以字段-属性的映射支持 FULL,PARTIAL -->
		<setting name="autoMappingBehavior" value="PARTIAL" />
		<!-- 设定默认的执行器，对于批量更新操作缓存SQL以提高性能 BATCH,SIMPLE，默认为SIMPLE -->
		<!-- <setting name="defaultExecutorType" value="BATCH" /> -->
		<!-- 数据库超过25000秒仍未响应则超时 -->
		<!-- <setting name="defaultStatementTimeout" value="25" /> -->
		<!-- 允许在嵌套语句中使用分页（RowBounds），如果允许使用则设置为 false -->
		<setting name="safeRowBoundsEnabled" value="false" />
		<!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名A_COLUMN到经典Java属性名aColumn的类似映射 -->
		<setting name="mapUnderscoreToCamelCase" value="true" />
		<!-- 当没有为参数提供特定的JDBC类型时，为空值指定JDBC类型。某些驱动需要指定列的JDBC类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR或OTHER -->
		<setting name="jdbcTypeForNull" value="OTHER" />
	</settings>
	<!-- 指定路径下的实体类支持别名(默认实体类的名称,全小写), @Alias注解可设置别名 -->
	<typeAliases>
		<package name="com.fullmoon.study.model" />
	</typeAliases>
	<plugins>
		<!-- com.github.pagehelper为PageHelper类所在包名 -->
		<plugin interceptor="com.github.pagehelper.PageHelper">
			<!-- 设置数据库，4.0.0以后版本可以不设置该参数 -->
			<property name="dialect" value="mysql" />
			<!-- 该参数默认为false -->
			<!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->
			<!-- 和startPage中的pageNum效果一样 -->
			<property name="offsetAsPageNum" value="true" />
			<!-- 该参数默认为false -->
			<!-- 设置为true时，使用RowBounds分页会进行count查询 -->
			<property name="rowBoundsWithCount" value="true" />
			<!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
			<!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型） -->
			<property name="pageSizeZero" value="true" />
			<!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
			<!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
			<!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
			<property name="reasonable" value="false" />
			<!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 -->
			<!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 -->
			<!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值 -->
			<!-- 不理解该含义的前提下，不要随便复制该配置 -->
			<property name="params" value="pageNum=pageHelperStart;pageSize=pageHelperRows;" />
			<!-- 支持通过Mapper接口参数来传递分页参数 -->
			<property name="supportMethodsArguments" value="false" />
			<!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->
			<property name="returnPageInfo" value="none" />
		</plugin>
	</plugins>
</configuration>