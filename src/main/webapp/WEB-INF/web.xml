<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <display-name>Archetype Created Web Application</display-name>

    <!-- Spring和mybatis的配置文件 -->
     <context-param>
         <param-name>contextConfigLocation</param-name>
         <param-value>classpath:spring-mybatis.xml</param-value>
     </context-param>

    <!-- 编码过滤器,Spring提供了CharacterEncodingFilter过滤器,
         这个过滤器就是针对于每次浏览器请求进行过滤的
         然后再其之上添加了父类没有的功能即处理字符编码-->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <async-supported>true</async-supported>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 在容器（Tomcat、Jetty）启动时会被ContextLoaderListener监听到，从而调用其contextInitialized()方法，初始化 Root WebApplicationContext 容器 -->
    <!-- 声明Spring Web容器监听器 -->
    <listener>
         <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
     </listener>
    <!-- 防止Spring内存溢出监听器 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <!--
        1.SpringMVC配置 前置控制器（SpringMVC的入口）
        DispatcherServlet是一个Servlet,,所以可以配置多个DispatcherServlet -->
    <servlet>
        <!-- 在DispatcherServlet的初始化过程中,框架会在web应用的WEB-INF文件夹下寻找名为[servlet-name]-servlet.xml 的配置文件,生成文件中定义的bean. -->
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- 配置需要加载的配置文件 -->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring-mvc.xml</param-value>
        </init-param>
        <!--
            程序运行时从web.xml开始，加载顺序为:context-param -> listener -> filter -> structs (如果使用structs的话) -> servlet
            设置web.xml文件启动时加载的顺序(1代表容器启动时首先初始化该servlet，让这个Servlet随Servlet容器一起启动)
            load-on-startup是指这个servlet是在当前web应用被加载的时候就被创建，而不是第一次被请求的时候被创建  -->
        <load-on-startup>1</load-on-startup>
        <async-supported>true</async-supported>
    </servlet>
    <servlet-mapping>
        <!--
          这个Servlet的名字是SpringMVC,可以有多个DispatcherServlet,是通过名字来区分的.
          每一个DispatcherServlet有自己的WebApplicationContext上下文对象,同时保存的ServletContext中和Request对象中.
          ApplicationContext(容器)是Spring的核心,Context我们通常解释为上下文环境,Spring把Bean放在这个容器中,在需要的时候,用getBean方法取出-->
        <servlet-name>SpringMVC</servlet-name>
        <!-- Servlet拦截匹配规则,可选配置:*.do、*.action、*.html、/、/xxx/* ,不允许:/* -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>


    <welcome-file-list>
        <!-- 浏览器输入到项目名，默认打开如下配置页面 -->
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

</web-app>